# -*- coding: utf-8 -*-
"""youtube analisis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cLDBAva7HOtZWw6J6j4uL6W0eRcbFi8i
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import MinMaxScaler

df = pd.read_csv('/content/Global YouTube Statistics.csv', encoding='unicode_escape' )

df.head()

df.describe()

df.info()

df.nunique()

df.isnull().sum()

df.isnull().sum()

df['Country'].fillna(df['Country'].mode()[0], inplace=True)
df['category'].fillna(df['category'].mode()[0], inplace=True)
df['Abbreviation'].fillna(df['Abbreviation'].mode()[0], inplace=True)
df['channel_type'].fillna(df['channel_type'].mode()[0], inplace=True)

df['video_views_rank'].fillna(df['video_views_rank'].mean(), inplace=True)
df['country_rank'].fillna(df['country_rank'].mean(), inplace=True)
df['channel_type_rank'].fillna(df['channel_type_rank'].mean(), inplace=True)
df['video_views_for_the_last_30_days'].fillna(df['video_views_for_the_last_30_days'].mean(), inplace=True)
df['subscribers_for_last_30_days'].fillna(df['subscribers_for_last_30_days'].mean(), inplace=True)
df['Gross tertiary education enrollment (%)'].fillna(df['Gross tertiary education enrollment (%)'].mean(), inplace=True)
df['Population'].fillna(df['Population'].mean(), inplace=True)
df['Unemployment rate'].fillna(df['Unemployment rate'].mean(), inplace=True)
df['Urban_population'].fillna(df['Urban_population'].mean(), inplace=True)
df['Latitude'].fillna(df['Latitude'].mean(), inplace=True)
df['Longitude'].fillna(df['Longitude'].mean(), inplace=True)

df[df['created_year']==0]
df[df['created_month']==0]
df[df['created_date']==0]

df.isnull().sum()

df_indo = df[df['Country'] == 'Indonesia']
df_indo.head()

df_indo.describe()

"""####cek outlier"""

numerical_col = df_indo.select_dtypes(exclude='object')
numerical_col = numerical_col.loc[:, numerical_col.columns != 'category']
numerical_col.head(4)

# Pastikan ukuran figur (figsize) mencukupi untuk menampung semua subplot
fig, axes = plt.subplots(nrows=3, ncols=8, figsize=(20, 10))

# Plot boxplot untuk setiap kolom dan tandai outlier
axes = axes.flatten()  # Menggabungkan matriks subplot menjadi array 1 dimensi
boxprops = dict(color='k', linewidth=2)
flierprops = dict(marker='o', markerfacecolor='red', markersize=8, linestyle='none', alpha=0.7)

for i, (col, ax) in enumerate(zip(numerical_col.columns, axes)):
    ax.boxplot(numerical_col[col], boxprops=boxprops, flierprops=flierprops)
    ax.set_title(col)

plt.tight_layout()
plt.show()

"""IQR"""

#menghitung nilai IQR

Q1 = df_indo['subscribers'].quantile(0.25) #mencari nilai minimun
Q3 = df_indo['subscribers'].quantile(0.75) #mencari nilai maksimum
IQR = Q3-Q1                                            #menghitung IQR

print('Q1 = ', Q1)
print('Q3 = ', Q3)
print('IQR subscribers = ', IQR)

#memerikasa outlier

nilai_min = df_indo['subscribers'].min()    #mencari nilai minimum
nilai_max = df_indo['subscribers'].max()    #mencari nilai maksimum

min_IQR = Q1 - 1.5 * IQR    #menghitung nilai minimum IQR
max_IQR = Q3 + 1.5 * IQR    #menghitung nilai maksimum IQR

#buat kondisi untuk mencari low outlier
if (nilai_min < min_IQR) :
    print('Low outlier is found < ', min_IQR)
    print('Low outlier index : ', list(df_indo[df_indo['subscribers'] < min_IQR].index ))  #menampilkan indeks low outlier

#buat kondisi untuk mencari high outlier
if (nilai_max > max_IQR) :
    print('High outlier is found > ', max_IQR)
    print('High outlier index : ', list(df_indo[df_indo['subscribers'] > max_IQR].index ))  #menampilkan indeks low outlier

"""##Data Analysis"""

sns.barplot(y='Youtuber', x='subscribers',data=df_indo)
plt.title('Most Youtuber Poppular in indonesia')

category = df_indo['category'].value_counts()
colors = sns.color_palette('inferno', len(category))

# Plotting
plt.figure(figsize=(12,6))
sns.barplot(x=category.index, y=category, palette=colors)

# Adding data labels
for i, count in enumerate(category):
    plt.text(i, count + 0.1, str(count), ha='center', va='bottom', fontsize=10, fontweight='bold')

# Adding labels and title
plt.xlabel('category', fontsize=14, fontweight='bold')
plt.ylabel('Counts', fontsize=14, fontweight='bold')
plt.title('Distribution of categorys', fontsize=16)

# Rotating x-axis labels for better readability
plt.xticks(rotation=45, ha='right')

# Display the plot
plt.tight_layout()
plt.show()

df_indo.groupby('category').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

df_indo['category'].value_counts()

df_indo[['Youtuber','video views']]

"""Upload video terbanyak terbanyak"""

plt.figure(figsize=(16, 8))
sns.barplot(x='uploads', y='Youtuber', data=df_indo)
plt.title('Bar Plot upload terbanyak')
plt.show()

"""highest yearly earnings and Youtuber  
youtuber pendapatan pertahun terbesar
"""

top_10_youtuber = df_indo[['Youtuber','highest_yearly_earnings','created_year','category']].sort_values(by='highest_yearly_earnings', ascending=False).head(10)
fig = px.bar(top_10_youtuber, x='highest_yearly_earnings', y='Youtuber')
fig.update_layout(yaxis=dict(autorange="reversed"))
fig.show()

df_indo[['video views','uploads']].sort_values(by='uploads', ascending=False)

df_indo.plot(kind='scatter', x='video views', y='uploads', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

df_indo[['Youtuber', 'video views', 'subscribers']].sort_values(by='subscribers', ascending=False)

"""Regresi linear"""

import statsmodels.api as sm

X = df_indo['video views']
X = sm.add_constant(X)
y = df_indo['highest_yearly_earnings']

model = sm.OLS(y, X).fit()
print(model.summary())

plt.figure(figsize=(12, 8))
sns.scatterplot(x='video views', y='highest_yearly_earnings', data=df_indo)
plt.plot(df_indo['video views'], model.predict(), color='red', linewidth=2)
plt.title('Scatter Plot dan Regresi antara Video Views dan Highest Yearly Earnings')
plt.show()

"""###Machine Learning"""

from sklearn.preprocessing import LabelEncoder

# Inisialisasi LabelEncoder
label_encoder = LabelEncoder()

# Melakukan label encoding pada kolom 'Kategori'
df_indo['Kategori_Encoded'] = label_encoder.fit_transform(df_indo['category'])

# Menampilkan DataFrame setelah label encoding
print(df_indo)

features = ['video views', 'subscribers', 'highest_yearly_earnings', 'Kategori_Encoded']

scaler = MinMaxScaler()
data_scaled = scaler.fit_transform(df_indo[features])

from sklearn.cluster import KMeans
km = KMeans(n_clusters=3)
km

kmeans = KMeans(n_clusters=3, random_state=0)
labels = kmeans.fit_predict(data_scaled)

df_indo['cluster'] = labels
df_indo.shape

df_indo.groupby('cluster')[features].mean()

def clustering(df_indo, col1, col2):
    # Define the unique cluster labels
    unique_clusters = df_indo['cluster'].unique()
    # Define colors for each cluster
    colors = ['green', 'yellow', 'red']  # Add more colors as needed
    # Create a scatter plot for each cluster
    plt.figure(figsize=(8, 6))
    for i, cluster_label in enumerate(unique_clusters):
        cluster_df = df_indo[df_indo['cluster'] == cluster_label]
        plt.scatter(cluster_df[col1], cluster_df[col2], color=colors[i], label=f'Cluster {cluster_label}')

    # Add labels and legend
    plt.xlabel(col1)
    plt.ylabel(col2)
    plt.legend()

    # Set the plot title using an f-string
    plt.title(f'How {col1} and {col2} ')

    # Show the plot after all clusters have been plotted
    plt.show()

clustering(df_indo, 'video views','highest_yearly_earnings')

# Pilih jumlah cluster yang diinginkan (gantilah sesuai kebutuhan)
num_clusters = 3

# Inisialisasi model K-Means
kmeans = KMeans(n_clusters=num_clusters, random_state=42)

# Fit model pada data
kmeans.fit(data_scaled)

# Tambahkan label cluster ke DataFrame
df_indo['Cluster_Labels'] = kmeans.labels_

# Visualisasi hasil clustering
plt.figure(figsize=(12, 8))
sns.scatterplot(x='video views', y='subscribers', hue='Cluster_Labels', data=df_indo, palette='viridis', s=100)
plt.title('K-Means Clustering')
plt.xlabel('Video Views')
plt.ylabel('Subscribers')
plt.show()